--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.17.0 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local Future = require(ReplicatedStorage.pkg.future)
local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[1] = CreateQueue()
Queue.Reliable[2] = CreateQueue()
Queue.Reliable[3] = CreateQueue()
Queue.Reliable[4] = CreateQueue()
Queue.Reliable[5] = CreateQueue()
Queue.Reliable[6] = CreateQueue()
Queue.Reliable[7] = CreateQueue()
Queue.Reliable[8] = CreateQueue()
Queue.Reliable[10] = CreateQueue()
Queue.Reliable[15] = CreateQueue()
Queue.Reliable[16] = CreateQueue()
Queue.Reliable[18] = CreateQueue()
Queue.Reliable[20] = CreateQueue()
Queue.Reliable[23] = CreateQueue()
Queue.Reliable[24] = CreateQueue()
export type Entity = number
export type Model = Model?
export type Building_HouseType = ("interior" | "exterior")
export type Building_IsNPC = boolean
export type Building_ExteriorHouseType = string
export type RouberOrders_DeliveryType = { ["restaurant_id"]: number, ["destination_id"]: number, ["foods_list_id"]: { number }, ["conditions_list_id"]: { number } }
export type RouberOrders_DeliveryRewardType = { coins: number, gems: number, ["has_mystery_box"]: boolean }
export type RouberOrders_OrderChoices = ("Deliver" | "Steal" | "Tamper")
local function Building_WriteEVENT_IWantToTeleportInOrOut(Value1: number, Value2: ("interior" | "exterior")): ()
	-- Allocate BLOCK: 10 bytes
	local BLOCK_START = Allocate(10)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	buffer.writef64(SendBuffer, BLOCK_START + 1, Value1)
	if Value2 == "interior" then
		buffer.writeu8(SendBuffer, BLOCK_START + 9, 0)
	elseif Value2 == "exterior" then
		buffer.writeu8(SendBuffer, BLOCK_START + 9, 1)
	else
		error(`Unexpected enum: {Value2}, expected one of "interior" or "exterior".`)
	end
end

local function Building_ReadEVENT_add_cutscene_to_house(): (number)
	-- Read BLOCK: 8 bytes
	local BLOCK_START = Read(8)
	local Value = buffer.readf64(RecieveBuffer, BLOCK_START + 0)
	return Value
end

local function Building_ReadEVENT_bulk_create_house_owners(): ({ number }, { Instance }, { boolean })
	-- Read BLOCK: 3 bytes
	local BLOCK_START = Read(3)
	-- START ARRAY
	local Length = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 50 then error(`Expected "Length" to be smaller than 50, got {Length} instead.`) end
	local Value1 = table.create(Length)
		-- Read BLOCK: 8 bytes
	local ARRAY_START_1 = Read(8 * Length)
	for Index = 1, Length do
		-- Read 8
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 8
		local Item_1 = buffer.readf64(RecieveBuffer, OPERATION_OFFSET)
		table.insert(Value1, Item_1)
	end
	-- END ARRAY
	-- START ARRAY
	Length = buffer.readu8(RecieveBuffer, BLOCK_START + 1)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 50 then error(`Expected "Length" to be smaller than 50, got {Length} instead.`) end
	local Value2 = table.create(Length)
	for Index = 1, Length do
		RecieveInstanceCursor += 1
		local Item_1 = RecieveInstances[RecieveInstanceCursor]
		if typeof(Item_1) ~= "Instance" then error(`Expected an Instance, got {typeof(Item_1)} instead.`) end
		if not Item_1:IsA("Instance") then error(`Expected an Instance of type "Instance", got "{Item_1.ClassName}" instead.`) end
		table.insert(Value2, Item_1)
	end
	-- END ARRAY
	-- START ARRAY
	Length = buffer.readu8(RecieveBuffer, BLOCK_START + 2)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 50 then error(`Expected "Length" to be smaller than 50, got {Length} instead.`) end
	local Value3 = table.create(Length)
		-- Read BLOCK: 1 bytes
	local ARRAY_START_1 = Read(1 * Length)
	for Index = 1, Length do
		-- Read 1
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 1
		local Item_1 = (buffer.readu8(RecieveBuffer, OPERATION_OFFSET) == 1)
		table.insert(Value3, Item_1)
	end
	-- END ARRAY
	return Value1, Value2, Value3
end

local function Building_ReadEVENT_bulk_create_house(): ({ number }, { CFrame }, { Instance }, { string }, { number })
	-- Read BLOCK: 5 bytes
	local BLOCK_START = Read(5)
	-- START ARRAY
	local Length = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 50 then error(`Expected "Length" to be smaller than 50, got {Length} instead.`) end
	local Value1 = table.create(Length)
		-- Read BLOCK: 8 bytes
	local ARRAY_START_1 = Read(8 * Length)
	for Index = 1, Length do
		-- Read 8
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 8
		local Item_1 = buffer.readf64(RecieveBuffer, OPERATION_OFFSET)
		table.insert(Value1, Item_1)
	end
	-- END ARRAY
	-- START ARRAY
	Length = buffer.readu8(RecieveBuffer, BLOCK_START + 1)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 50 then error(`Expected "Length" to be smaller than 50, got {Length} instead.`) end
	local Value2 = table.create(Length)
		-- Read BLOCK: 24 bytes
	local ARRAY_START_1 = Read(24 * Length)
	for Index = 1, Length do
		-- Read 4
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 4
		local X = buffer.readf32(RecieveBuffer, OPERATION_OFFSET)
		-- Read 4
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 4
		local Y = buffer.readf32(RecieveBuffer, OPERATION_OFFSET)
		-- Read 4
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 4
		local Z = buffer.readf32(RecieveBuffer, OPERATION_OFFSET)
		local Position = Vector3.new(X, Y, Z)
		-- Read 4
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 4
		local rX = buffer.readf32(RecieveBuffer, OPERATION_OFFSET)
		-- Read 4
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 4
		local rY = buffer.readf32(RecieveBuffer, OPERATION_OFFSET)
		-- Read 4
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 4
		local rZ = buffer.readf32(RecieveBuffer, OPERATION_OFFSET)
		local Item_1 = CFrame.new(Position) * CFrame.fromOrientation(rX, rY, rZ)
		table.insert(Value2, Item_1)
	end
	-- END ARRAY
	-- START ARRAY
	Length = buffer.readu8(RecieveBuffer, BLOCK_START + 2)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 50 then error(`Expected "Length" to be smaller than 50, got {Length} instead.`) end
	local Value3 = table.create(Length)
	for Index = 1, Length do
		RecieveInstanceCursor += 1
		local Item_1 = RecieveInstances[RecieveInstanceCursor]
		if typeof(Item_1) ~= "Instance" then error(`Expected an Instance, got {typeof(Item_1)} instead.`) end
		if not Item_1:IsA("Instance") then error(`Expected an Instance of type "Instance", got "{Item_1.ClassName}" instead.`) end
		table.insert(Value3, Item_1)
	end
	-- END ARRAY
	-- START ARRAY
	Length = buffer.readu8(RecieveBuffer, BLOCK_START + 3)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 50 then error(`Expected "Length" to be smaller than 50, got {Length} instead.`) end
	local Value4 = table.create(Length)
		-- Read BLOCK: 2 bytes
	local ARRAY_START_1 = Read(2 * Length)
	for Index = 1, Length do
		-- Read 2
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 2
		Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET)
		local Item_1 = buffer.readstring(RecieveBuffer, Read(Length), Length)
		table.insert(Value4, Item_1)
	end
	-- END ARRAY
	-- START ARRAY
	Length = buffer.readu8(RecieveBuffer, BLOCK_START + 4)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 50 then error(`Expected "Length" to be smaller than 50, got {Length} instead.`) end
	local Value5 = table.create(Length)
		-- Read BLOCK: 8 bytes
	local ARRAY_START_1 = Read(8 * Length)
	for Index = 1, Length do
		-- Read 8
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 8
		local Item_1 = buffer.readf64(RecieveBuffer, OPERATION_OFFSET)
		table.insert(Value5, Item_1)
	end
	-- END ARRAY
	return Value1, Value2, Value3, Value4, Value5
end

local function Building_ReadEVENT_create_house_owner(): (number, Instance, boolean)
	-- Read BLOCK: 9 bytes
	local BLOCK_START = Read(9)
	local Value1 = buffer.readf64(RecieveBuffer, BLOCK_START + 0)
	RecieveInstanceCursor += 1
	local Value2 = RecieveInstances[RecieveInstanceCursor]
	if typeof(Value2) ~= "Instance" then error(`Expected an Instance, got {typeof(Value2)} instead.`) end
	if not Value2:IsA("Instance") then error(`Expected an Instance of type "Instance", got "{Value2.ClassName}" instead.`) end
	local Value3 = (buffer.readu8(RecieveBuffer, BLOCK_START + 8) == 1)
	return Value1, Value2, Value3
end

local function Building_ReadEVENT_create_house(): (number, CFrame, Instance, string, number)
	-- Read BLOCK: 42 bytes
	local BLOCK_START = Read(42)
	local Value1 = buffer.readf64(RecieveBuffer, BLOCK_START + 0)
	local X = buffer.readf32(RecieveBuffer, BLOCK_START + 8)
	local Y = buffer.readf32(RecieveBuffer, BLOCK_START + 12)
	local Z = buffer.readf32(RecieveBuffer, BLOCK_START + 16)
	local Position = Vector3.new(X, Y, Z)
	local rX = buffer.readf32(RecieveBuffer, BLOCK_START + 20)
	local rY = buffer.readf32(RecieveBuffer, BLOCK_START + 24)
	local rZ = buffer.readf32(RecieveBuffer, BLOCK_START + 28)
	local Value2 = CFrame.new(Position) * CFrame.fromOrientation(rX, rY, rZ)
	RecieveInstanceCursor += 1
	local Value3 = RecieveInstances[RecieveInstanceCursor]
	if typeof(Value3) ~= "Instance" then error(`Expected an Instance, got {typeof(Value3)} instead.`) end
	if not Value3:IsA("Instance") then error(`Expected an Instance of type "Instance", got "{Value3.ClassName}" instead.`) end
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 32)
	local Value4 = buffer.readstring(RecieveBuffer, Read(Length), Length)
	local Value5 = buffer.readf64(RecieveBuffer, BLOCK_START + 34)
	return Value1, Value2, Value3, Value4, Value5
end

local function Building_ReadEVENT_delete_house_owner(): (number)
	-- Read BLOCK: 8 bytes
	local BLOCK_START = Read(8)
	local Value = buffer.readf64(RecieveBuffer, BLOCK_START + 0)
	return Value
end

local function Building_ReadEVENT_bulk_create_restaurants(): ({ number }, { string }, { Instance })
	-- Read BLOCK: 3 bytes
	local BLOCK_START = Read(3)
	-- START ARRAY
	local Length = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 10 then error(`Expected "Length" to be smaller than 10, got {Length} instead.`) end
	local Value1 = table.create(Length)
		-- Read BLOCK: 8 bytes
	local ARRAY_START_1 = Read(8 * Length)
	for Index = 1, Length do
		-- Read 8
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 8
		local Item_1 = buffer.readf64(RecieveBuffer, OPERATION_OFFSET)
		table.insert(Value1, Item_1)
	end
	-- END ARRAY
	-- START ARRAY
	Length = buffer.readu8(RecieveBuffer, BLOCK_START + 1)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 10 then error(`Expected "Length" to be smaller than 10, got {Length} instead.`) end
	local Value2 = table.create(Length)
		-- Read BLOCK: 2 bytes
	local ARRAY_START_1 = Read(2 * Length)
	for Index = 1, Length do
		-- Read 2
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 2
		Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET)
		local Item_1 = buffer.readstring(RecieveBuffer, Read(Length), Length)
		table.insert(Value2, Item_1)
	end
	-- END ARRAY
	-- START ARRAY
	Length = buffer.readu8(RecieveBuffer, BLOCK_START + 2)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 10 then error(`Expected "Length" to be smaller than 10, got {Length} instead.`) end
	local Value3 = table.create(Length)
	for Index = 1, Length do
		RecieveInstanceCursor += 1
		local Item_1 = RecieveInstances[RecieveInstanceCursor]
		if typeof(Item_1) ~= "Instance" then error(`Expected an Instance, got {typeof(Item_1)} instead.`) end
		if not Item_1:IsA("Instance") then error(`Expected an Instance of type "Instance", got "{Item_1.ClassName}" instead.`) end
		table.insert(Value3, Item_1)
	end
	-- END ARRAY
	return Value1, Value2, Value3
end

local function PlayerEvents_ReadEVENT_player_loaded_in(): (number)
	-- Read BLOCK: 8 bytes
	local BLOCK_START = Read(8)
	local Value = buffer.readf64(RecieveBuffer, BLOCK_START + 0)
	return Value
end

local function PlayerEvents_WriteEVENT_i_have_loaded_in(Value: nil): ()
	-- Allocate BLOCK: 1 bytes
	local BLOCK_START = Allocate(1)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 9)
end

local function PlayerEvents_ReadEVENT_setup_map_on_join(): (nil)
	return nil
end

local function PlayerEvents_WriteEVENT_i_have_setup_map(Value: nil): ()
	-- Allocate BLOCK: 1 bytes
	local BLOCK_START = Allocate(1)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 11)
end

local function PlayerEvents_WriteEVENT_i_have_setup_houses(Value: nil): ()
	-- Allocate BLOCK: 1 bytes
	local BLOCK_START = Allocate(1)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 12)
end

local function PlayerEvents_WriteEVENT_i_have_setup_restaurants(Value: nil): ()
	-- Allocate BLOCK: 1 bytes
	local BLOCK_START = Allocate(1)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 13)
end

local function PlayerEvents_WriteEVENT_i_have_bulk_created_orders_initially(Value: nil): ()
	-- Allocate BLOCK: 1 bytes
	local BLOCK_START = Allocate(1)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 14)
end

local function RouberOrders_ReadEVENT_create_order(): (number, { ["restaurant_id"]: number, ["destination_id"]: number, ["foods_list_id"]: { number }, ["conditions_list_id"]: { number } }, { coins: number, gems: number, ["has_mystery_box"]: boolean })
	-- Read BLOCK: 29 bytes
	local BLOCK_START = Read(29)
	local Value1 = buffer.readf64(RecieveBuffer, BLOCK_START + 0)
	local Value2 = {} :: any
	Value2["restaurant_id"] = buffer.readf64(RecieveBuffer, BLOCK_START + 8)
	Value2["destination_id"] = buffer.readf64(RecieveBuffer, BLOCK_START + 16)
	-- START ARRAY
	local Length = buffer.readu8(RecieveBuffer, BLOCK_START + 24)
	if Length < 1 then error(`Expected "Length" to be larger than 1, got {Length} instead.`) end
	if Length > 10 then error(`Expected "Length" to be smaller than 10, got {Length} instead.`) end
	Value2["foods_list_id"] = table.create(Length)
		-- Read BLOCK: 8 bytes
	local ARRAY_START_1 = Read(8 * Length)
	for Index = 1, Length do
		-- Read 8
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 8
		local Item_1 = buffer.readf64(RecieveBuffer, OPERATION_OFFSET)
		table.insert(Value2["foods_list_id"], Item_1)
	end
	-- END ARRAY
	-- START ARRAY
	Length = buffer.readu8(RecieveBuffer, BLOCK_START + 25)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 10 then error(`Expected "Length" to be smaller than 10, got {Length} instead.`) end
	Value2["conditions_list_id"] = table.create(Length)
		-- Read BLOCK: 8 bytes
	local ARRAY_START_1 = Read(8 * Length)
	for Index = 1, Length do
		-- Read 8
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 8
		local Item_1 = buffer.readf64(RecieveBuffer, OPERATION_OFFSET)
		table.insert(Value2["conditions_list_id"], Item_1)
	end
	-- END ARRAY
	local Value3 = {} :: any
	Value3.coins = buffer.readu8(RecieveBuffer, BLOCK_START + 26)
	Value3.gems = buffer.readu8(RecieveBuffer, BLOCK_START + 27)
	Value3["has_mystery_box"] = (buffer.readu8(RecieveBuffer, BLOCK_START + 28) == 1)
	return Value1, Value2, Value3
end

local function RouberOrders_ReadEVENT_bulk_create_order(): ({ number }, { { ["restaurant_id"]: number, ["destination_id"]: number, ["foods_list_id"]: { number }, ["conditions_list_id"]: { number } } }, { { coins: number, gems: number, ["has_mystery_box"]: boolean } })
	-- Read BLOCK: 3 bytes
	local BLOCK_START = Read(3)
	-- START ARRAY
	local Length = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 100 then error(`Expected "Length" to be smaller than 100, got {Length} instead.`) end
	local Value1 = table.create(Length)
		-- Read BLOCK: 8 bytes
	local ARRAY_START_1 = Read(8 * Length)
	for Index = 1, Length do
		-- Read 8
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 8
		local Item_1 = buffer.readf64(RecieveBuffer, OPERATION_OFFSET)
		table.insert(Value1, Item_1)
	end
	-- END ARRAY
	-- START ARRAY
	Length = buffer.readu8(RecieveBuffer, BLOCK_START + 1)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 100 then error(`Expected "Length" to be smaller than 100, got {Length} instead.`) end
	local Value2 = table.create(Length)
		-- Read BLOCK: 18 bytes
	local ARRAY_START_1 = Read(18 * Length)
	for Index = 1, Length do
		local Item_1 = {} :: any
		-- Read 8
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 8
		Item_1["restaurant_id"] = buffer.readf64(RecieveBuffer, OPERATION_OFFSET)
		-- Read 8
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 8
		Item_1["destination_id"] = buffer.readf64(RecieveBuffer, OPERATION_OFFSET)
		-- START ARRAY
		-- Read 1
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 1
		Length = buffer.readu8(RecieveBuffer, OPERATION_OFFSET)
		if Length < 1 then error(`Expected "Length" to be larger than 1, got {Length} instead.`) end
		if Length > 10 then error(`Expected "Length" to be smaller than 10, got {Length} instead.`) end
		Item_1["foods_list_id"] = table.create(Length)
			-- Read BLOCK: 8 bytes
		local ARRAY_START_2 = Read(8 * Length)
		for Index = 1, Length do
			-- Read 8
			local OPERATION_OFFSET = ARRAY_START_2
			ARRAY_START_2 += 8
			local Item_2 = buffer.readf64(RecieveBuffer, OPERATION_OFFSET)
			table.insert(Item_1["foods_list_id"], Item_2)
		end
		-- END ARRAY
		-- START ARRAY
		-- Read 1
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 1
		Length = buffer.readu8(RecieveBuffer, OPERATION_OFFSET)
		if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
		if Length > 10 then error(`Expected "Length" to be smaller than 10, got {Length} instead.`) end
		Item_1["conditions_list_id"] = table.create(Length)
			-- Read BLOCK: 8 bytes
		local ARRAY_START_2 = Read(8 * Length)
		for Index = 1, Length do
			-- Read 8
			local OPERATION_OFFSET = ARRAY_START_2
			ARRAY_START_2 += 8
			local Item_2 = buffer.readf64(RecieveBuffer, OPERATION_OFFSET)
			table.insert(Item_1["conditions_list_id"], Item_2)
		end
		-- END ARRAY
		table.insert(Value2, Item_1)
	end
	-- END ARRAY
	-- START ARRAY
	Length = buffer.readu8(RecieveBuffer, BLOCK_START + 2)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 100 then error(`Expected "Length" to be smaller than 100, got {Length} instead.`) end
	local Value3 = table.create(Length)
		-- Read BLOCK: 3 bytes
	local ARRAY_START_1 = Read(3 * Length)
	for Index = 1, Length do
		local Item_1 = {} :: any
		-- Read 1
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 1
		Item_1.coins = buffer.readu8(RecieveBuffer, OPERATION_OFFSET)
		-- Read 1
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 1
		Item_1.gems = buffer.readu8(RecieveBuffer, OPERATION_OFFSET)
		-- Read 1
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 1
		Item_1["has_mystery_box"] = (buffer.readu8(RecieveBuffer, OPERATION_OFFSET) == 1)
		table.insert(Value3, Item_1)
	end
	-- END ARRAY
	return Value1, Value2, Value3
end

local function RouberOrders_WriteEVENT_i_want_to_accept_order(Value: number): ()
	-- Allocate BLOCK: 9 bytes
	local BLOCK_START = Allocate(9)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 17)
	buffer.writef64(SendBuffer, BLOCK_START + 1, Value)
end

local function RouberOrders_ReadEVENT_accept_order_response(): (boolean, number?, string?)
	-- Read BLOCK: 3 bytes
	local BLOCK_START = Read(3)
	local Value1 = (buffer.readu8(RecieveBuffer, BLOCK_START + 0) == 1)
	local Value2
	if buffer.readu8(RecieveBuffer, BLOCK_START + 1) == 1 then
		-- Read BLOCK: 8 bytes
		local BLOCK_START = Read(8)
		Value2 = buffer.readf64(RecieveBuffer, BLOCK_START + 0)
	end
	local Value3
	if buffer.readu8(RecieveBuffer, BLOCK_START + 2) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		Value3 = buffer.readstring(RecieveBuffer, Read(Length), Length)
	end
	return Value1, Value2, Value3
end

local function RouberOrders_WriteEVENT_i_want_to_pickup_order(Value: number): ()
	-- Allocate BLOCK: 9 bytes
	local BLOCK_START = Allocate(9)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 19)
	buffer.writef64(SendBuffer, BLOCK_START + 1, Value)
end

local function RouberOrders_ReadEVENT_pickup_order_response(): (boolean, number?, string?)
	-- Read BLOCK: 3 bytes
	local BLOCK_START = Read(3)
	local Value1 = (buffer.readu8(RecieveBuffer, BLOCK_START + 0) == 1)
	local Value2
	if buffer.readu8(RecieveBuffer, BLOCK_START + 1) == 1 then
		-- Read BLOCK: 8 bytes
		local BLOCK_START = Read(8)
		Value2 = buffer.readf64(RecieveBuffer, BLOCK_START + 0)
	end
	local Value3
	if buffer.readu8(RecieveBuffer, BLOCK_START + 2) == 1 then
		-- Read BLOCK: 2 bytes
		local BLOCK_START = Read(2)
		local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
		Value3 = buffer.readstring(RecieveBuffer, Read(Length), Length)
	end
	return Value1, Value2, Value3
end

local function RouberOrders_WriteEVENT_my_choice_for_this_order(Value1: number, Value2: ("Deliver" | "Steal" | "Tamper")): ()
	-- Allocate BLOCK: 10 bytes
	local BLOCK_START = Allocate(10)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 21)
	buffer.writef64(SendBuffer, BLOCK_START + 1, Value1)
	if Value2 == "Deliver" then
		buffer.writeu8(SendBuffer, BLOCK_START + 9, 0)
	elseif Value2 == "Steal" then
		buffer.writeu8(SendBuffer, BLOCK_START + 9, 1)
	elseif Value2 == "Tamper" then
		buffer.writeu8(SendBuffer, BLOCK_START + 9, 2)
	else
		error(`Unexpected enum: {Value2}, expected one of "Deliver" or "Steal" or "Tamper".`)
	end
end

local function RouberOrders_WriteEVENT_i_want_to_complete_order(Value: number): ()
	-- Allocate BLOCK: 9 bytes
	local BLOCK_START = Allocate(9)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 22)
	buffer.writef64(SendBuffer, BLOCK_START + 1, Value)
end

local function RouberOrders_ReadEVENT_bulk_setup_food(): ({ number }, { string })
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	-- START ARRAY
	local Length = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 100 then error(`Expected "Length" to be smaller than 100, got {Length} instead.`) end
	local Value1 = table.create(Length)
		-- Read BLOCK: 8 bytes
	local ARRAY_START_1 = Read(8 * Length)
	for Index = 1, Length do
		-- Read 8
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 8
		local Item_1 = buffer.readf64(RecieveBuffer, OPERATION_OFFSET)
		table.insert(Value1, Item_1)
	end
	-- END ARRAY
	-- START ARRAY
	Length = buffer.readu8(RecieveBuffer, BLOCK_START + 1)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 100 then error(`Expected "Length" to be smaller than 100, got {Length} instead.`) end
	local Value2 = table.create(Length)
		-- Read BLOCK: 2 bytes
	local ARRAY_START_1 = Read(2 * Length)
	for Index = 1, Length do
		-- Read 2
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 2
		Length = buffer.readu16(RecieveBuffer, OPERATION_OFFSET)
		local Item_1 = buffer.readstring(RecieveBuffer, Read(Length), Length)
		table.insert(Value2, Item_1)
	end
	-- END ARRAY
	return Value1, Value2
end

local function RouberCurrency_ReadEVENT_IncreaseCoins(): (number)
	-- Read BLOCK: 1 bytes
	local BLOCK_START = Read(1)
	local Value = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	return Value
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	Building = {
		IWantToTeleportInOrOut = {
			fire = NOOP
		},
		add_cutscene_to_house = {
			iter = NOOP,
			next = NOOP
		},
		bulk_create_house_owners = {
			iter = NOOP,
			next = NOOP
		},
		bulk_create_house = {
			iter = NOOP,
			next = NOOP
		},
		create_house_owner = {
			iter = NOOP,
			next = NOOP
		},
		create_house = {
			iter = NOOP,
			next = NOOP
		},
		delete_house_owner = {
			iter = NOOP,
			next = NOOP
		},
		bulk_create_restaurants = {
			iter = NOOP,
			next = NOOP
		},
	},
	PlayerEvents = {
		player_loaded_in = {
			iter = NOOP,
			next = NOOP
		},
		i_have_loaded_in = {
			fire = NOOP
		},
		setup_map_on_join = {
			iter = NOOP,
			next = NOOP
		},
		i_have_setup_map = {
			fire = NOOP
		},
		i_have_setup_houses = {
			fire = NOOP
		},
		i_have_setup_restaurants = {
			fire = NOOP
		},
		i_have_bulk_created_orders_initially = {
			fire = NOOP
		},
	},
	RouberOrders = {
		create_order = {
			iter = NOOP,
			next = NOOP
		},
		bulk_create_order = {
			iter = NOOP,
			next = NOOP
		},
		i_want_to_accept_order = {
			fire = NOOP
		},
		accept_order_response = {
			iter = NOOP,
			next = NOOP
		},
		i_want_to_pickup_order = {
			fire = NOOP
		},
		pickup_order_response = {
			iter = NOOP,
			next = NOOP
		},
		my_choice_for_this_order = {
			fire = NOOP
		},
		i_want_to_complete_order = {
			fire = NOOP
		},
		bulk_setup_food = {
			iter = NOOP,
			next = NOOP
		},
	},
	RouberCurrency = {
		IncreaseCoins = {
			iter = NOOP,
			next = NOOP
		},
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsClient() then
    error("Client network module can only be required from the client.")
end

local Reliable: RemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent

local function StepReplication()
    if SendCursor <= 0 then
        return
    end

    local Buffer = buffer.create(SendCursor)
    buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
    Reliable:FireServer(Buffer, SendInstances)

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    table.clear(SendInstances)
end
local Elapsed = 0
RunService.Heartbeat:Connect(function(DeltaTime: number)
	Elapsed += DeltaTime
	if Elapsed >= (1 / 61) then
		Elapsed -= (1 / 61)
		StepReplication()
	end
end)
Reliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 1 then
			Push(Queue.Reliable[1], table.pack(Building_ReadEVENT_add_cutscene_to_house()))
		elseif Index == 2 then
			Push(Queue.Reliable[2], table.pack(Building_ReadEVENT_bulk_create_house_owners()))
		elseif Index == 3 then
			Push(Queue.Reliable[3], table.pack(Building_ReadEVENT_bulk_create_house()))
		elseif Index == 4 then
			Push(Queue.Reliable[4], table.pack(Building_ReadEVENT_create_house_owner()))
		elseif Index == 5 then
			Push(Queue.Reliable[5], table.pack(Building_ReadEVENT_create_house()))
		elseif Index == 6 then
			Push(Queue.Reliable[6], table.pack(Building_ReadEVENT_delete_house_owner()))
		elseif Index == 7 then
			Push(Queue.Reliable[7], table.pack(Building_ReadEVENT_bulk_create_restaurants()))
		elseif Index == 8 then
			Push(Queue.Reliable[8], table.pack(PlayerEvents_ReadEVENT_player_loaded_in()))
		elseif Index == 10 then
			Push(Queue.Reliable[10], table.pack(PlayerEvents_ReadEVENT_setup_map_on_join()))
		elseif Index == 15 then
			Push(Queue.Reliable[15], table.pack(RouberOrders_ReadEVENT_create_order()))
		elseif Index == 16 then
			Push(Queue.Reliable[16], table.pack(RouberOrders_ReadEVENT_bulk_create_order()))
		elseif Index == 18 then
			Push(Queue.Reliable[18], table.pack(RouberOrders_ReadEVENT_accept_order_response()))
		elseif Index == 20 then
			Push(Queue.Reliable[20], table.pack(RouberOrders_ReadEVENT_pickup_order_response()))
		elseif Index == 23 then
			Push(Queue.Reliable[23], table.pack(RouberOrders_ReadEVENT_bulk_setup_food()))
		elseif Index == 24 then
			Push(Queue.Reliable[24], table.pack(RouberCurrency_ReadEVENT_IncreaseCoins()))
		end
	end
end)
Unreliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)


local Returns = table.freeze({
	step_replication = StepReplication,

	Building = {
		IWantToTeleportInOrOut = {
			fire = function(Value1: number, Value2: ("interior" | "exterior")): ()
				Building_WriteEVENT_IWantToTeleportInOrOut(Value1, Value2)
			end
		},
		add_cutscene_to_house = {
			iter = function(): () -> (number, number)
				local index = 0
				local queue = Queue.Reliable[1]
				return function (): (number, number)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end,
			--- @deprecated v0.14.1 -- Use `Iter` instead.
			next = function(): () -> (number, number)
				local index = 0
				local queue = Queue.Reliable[1]
				return function (): (number, number)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end
		},
		bulk_create_house_owners = {
			iter = function(): () -> (number, { number }, { Instance }, { boolean })
				local index = 0
				local queue = Queue.Reliable[2]
				return function (): (number, { number }, { Instance }, { boolean })
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end,
			--- @deprecated v0.14.1 -- Use `Iter` instead.
			next = function(): () -> (number, { number }, { Instance }, { boolean })
				local index = 0
				local queue = Queue.Reliable[2]
				return function (): (number, { number }, { Instance }, { boolean })
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end
		},
		bulk_create_house = {
			iter = function(): () -> (number, { number }, { CFrame }, { Instance }, { string }, { number })
				local index = 0
				local queue = Queue.Reliable[3]
				return function (): (number, { number }, { CFrame }, { Instance }, { string }, { number })
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end,
			--- @deprecated v0.14.1 -- Use `Iter` instead.
			next = function(): () -> (number, { number }, { CFrame }, { Instance }, { string }, { number })
				local index = 0
				local queue = Queue.Reliable[3]
				return function (): (number, { number }, { CFrame }, { Instance }, { string }, { number })
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end
		},
		create_house_owner = {
			iter = function(): () -> (number, number, Instance, boolean)
				local index = 0
				local queue = Queue.Reliable[4]
				return function (): (number, number, Instance, boolean)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end,
			--- @deprecated v0.14.1 -- Use `Iter` instead.
			next = function(): () -> (number, number, Instance, boolean)
				local index = 0
				local queue = Queue.Reliable[4]
				return function (): (number, number, Instance, boolean)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end
		},
		create_house = {
			iter = function(): () -> (number, number, CFrame, Instance, string, number)
				local index = 0
				local queue = Queue.Reliable[5]
				return function (): (number, number, CFrame, Instance, string, number)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end,
			--- @deprecated v0.14.1 -- Use `Iter` instead.
			next = function(): () -> (number, number, CFrame, Instance, string, number)
				local index = 0
				local queue = Queue.Reliable[5]
				return function (): (number, number, CFrame, Instance, string, number)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end
		},
		delete_house_owner = {
			iter = function(): () -> (number, number)
				local index = 0
				local queue = Queue.Reliable[6]
				return function (): (number, number)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end,
			--- @deprecated v0.14.1 -- Use `Iter` instead.
			next = function(): () -> (number, number)
				local index = 0
				local queue = Queue.Reliable[6]
				return function (): (number, number)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end
		},
		bulk_create_restaurants = {
			iter = function(): () -> (number, { number }, { string }, { Instance })
				local index = 0
				local queue = Queue.Reliable[7]
				return function (): (number, { number }, { string }, { Instance })
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end,
			--- @deprecated v0.14.1 -- Use `Iter` instead.
			next = function(): () -> (number, { number }, { string }, { Instance })
				local index = 0
				local queue = Queue.Reliable[7]
				return function (): (number, { number }, { string }, { Instance })
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end
		},
	},
	PlayerEvents = {
		player_loaded_in = {
			iter = function(): () -> (number, number)
				local index = 0
				local queue = Queue.Reliable[8]
				return function (): (number, number)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end,
			--- @deprecated v0.14.1 -- Use `Iter` instead.
			next = function(): () -> (number, number)
				local index = 0
				local queue = Queue.Reliable[8]
				return function (): (number, number)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end
		},
		i_have_loaded_in = {
			fire = function(Value: nil): ()
				PlayerEvents_WriteEVENT_i_have_loaded_in(Value)
			end
		},
		setup_map_on_join = {
			iter = function(): () -> (number, nil)
				local index = 0
				local queue = Queue.Reliable[10]
				return function (): (number, nil)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end,
			--- @deprecated v0.14.1 -- Use `Iter` instead.
			next = function(): () -> (number, nil)
				local index = 0
				local queue = Queue.Reliable[10]
				return function (): (number, nil)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end
		},
		i_have_setup_map = {
			fire = function(Value: nil): ()
				PlayerEvents_WriteEVENT_i_have_setup_map(Value)
			end
		},
		i_have_setup_houses = {
			fire = function(Value: nil): ()
				PlayerEvents_WriteEVENT_i_have_setup_houses(Value)
			end
		},
		i_have_setup_restaurants = {
			fire = function(Value: nil): ()
				PlayerEvents_WriteEVENT_i_have_setup_restaurants(Value)
			end
		},
		i_have_bulk_created_orders_initially = {
			fire = function(Value: nil): ()
				PlayerEvents_WriteEVENT_i_have_bulk_created_orders_initially(Value)
			end
		},
	},
	RouberOrders = {
		create_order = {
			iter = function(): () -> (number, number, { ["restaurant_id"]: number, ["destination_id"]: number, ["foods_list_id"]: { number }, ["conditions_list_id"]: { number } }, { coins: number, gems: number, ["has_mystery_box"]: boolean })
				local index = 0
				local queue = Queue.Reliable[15]
				return function (): (number, number, { ["restaurant_id"]: number, ["destination_id"]: number, ["foods_list_id"]: { number }, ["conditions_list_id"]: { number } }, { coins: number, gems: number, ["has_mystery_box"]: boolean })
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end,
			--- @deprecated v0.14.1 -- Use `Iter` instead.
			next = function(): () -> (number, number, { ["restaurant_id"]: number, ["destination_id"]: number, ["foods_list_id"]: { number }, ["conditions_list_id"]: { number } }, { coins: number, gems: number, ["has_mystery_box"]: boolean })
				local index = 0
				local queue = Queue.Reliable[15]
				return function (): (number, number, { ["restaurant_id"]: number, ["destination_id"]: number, ["foods_list_id"]: { number }, ["conditions_list_id"]: { number } }, { coins: number, gems: number, ["has_mystery_box"]: boolean })
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end
		},
		bulk_create_order = {
			iter = function(): () -> (number, { number }, { { ["restaurant_id"]: number, ["destination_id"]: number, ["foods_list_id"]: { number }, ["conditions_list_id"]: { number } } }, { { coins: number, gems: number, ["has_mystery_box"]: boolean } })
				local index = 0
				local queue = Queue.Reliable[16]
				return function (): (number, { number }, { { ["restaurant_id"]: number, ["destination_id"]: number, ["foods_list_id"]: { number }, ["conditions_list_id"]: { number } } }, { { coins: number, gems: number, ["has_mystery_box"]: boolean } })
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end,
			--- @deprecated v0.14.1 -- Use `Iter` instead.
			next = function(): () -> (number, { number }, { { ["restaurant_id"]: number, ["destination_id"]: number, ["foods_list_id"]: { number }, ["conditions_list_id"]: { number } } }, { { coins: number, gems: number, ["has_mystery_box"]: boolean } })
				local index = 0
				local queue = Queue.Reliable[16]
				return function (): (number, { number }, { { ["restaurant_id"]: number, ["destination_id"]: number, ["foods_list_id"]: { number }, ["conditions_list_id"]: { number } } }, { { coins: number, gems: number, ["has_mystery_box"]: boolean } })
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end
		},
		i_want_to_accept_order = {
			fire = function(Value: number): ()
				RouberOrders_WriteEVENT_i_want_to_accept_order(Value)
			end
		},
		accept_order_response = {
			iter = function(): () -> (number, boolean, number?, string?)
				local index = 0
				local queue = Queue.Reliable[18]
				return function (): (number, boolean, number?, string?)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end,
			--- @deprecated v0.14.1 -- Use `Iter` instead.
			next = function(): () -> (number, boolean, number?, string?)
				local index = 0
				local queue = Queue.Reliable[18]
				return function (): (number, boolean, number?, string?)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end
		},
		i_want_to_pickup_order = {
			fire = function(Value: number): ()
				RouberOrders_WriteEVENT_i_want_to_pickup_order(Value)
			end
		},
		pickup_order_response = {
			iter = function(): () -> (number, boolean, number?, string?)
				local index = 0
				local queue = Queue.Reliable[20]
				return function (): (number, boolean, number?, string?)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end,
			--- @deprecated v0.14.1 -- Use `Iter` instead.
			next = function(): () -> (number, boolean, number?, string?)
				local index = 0
				local queue = Queue.Reliable[20]
				return function (): (number, boolean, number?, string?)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end
		},
		my_choice_for_this_order = {
			fire = function(Value1: number, Value2: ("Deliver" | "Steal" | "Tamper")): ()
				RouberOrders_WriteEVENT_my_choice_for_this_order(Value1, Value2)
			end
		},
		i_want_to_complete_order = {
			fire = function(Value: number): ()
				RouberOrders_WriteEVENT_i_want_to_complete_order(Value)
			end
		},
		bulk_setup_food = {
			iter = function(): () -> (number, { number }, { string })
				local index = 0
				local queue = Queue.Reliable[23]
				return function (): (number, { number }, { string })
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end,
			--- @deprecated v0.14.1 -- Use `Iter` instead.
			next = function(): () -> (number, { number }, { string })
				local index = 0
				local queue = Queue.Reliable[23]
				return function (): (number, { number }, { string })
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end
		},
	},
	RouberCurrency = {
		IncreaseCoins = {
			iter = function(): () -> (number, number)
				local index = 0
				local queue = Queue.Reliable[24]
				return function (): (number, number)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end,
			--- @deprecated v0.14.1 -- Use `Iter` instead.
			next = function(): () -> (number, number)
				local index = 0
				local queue = Queue.Reliable[24]
				return function (): (number, number)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end
		},
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL