--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.17.0 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local Future = require(ReplicatedStorage.pkg.future)
local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[0] = CreateQueue()
Queue.Reliable[9] = CreateQueue()
Queue.Reliable[11] = CreateQueue()
Queue.Reliable[12] = CreateQueue()
Queue.Reliable[13] = CreateQueue()
Queue.Reliable[14] = CreateQueue()
Queue.Reliable[17] = CreateQueue()
export type Entity = number
export type Model = Model?
export type Building_HouseType = ("interior" | "exterior")
export type Building_IsNPC = boolean
export type Building_ExteriorHouseType = string
export type RouberOrders_DeliveryType = { ["restaurant_id"]: number, ["destination_id"]: number, ["foods_list_id"]: { number }, ["conditions_list_id"]: { number } }
local function Building_ReadEVENT_IWantToTeleportInOrOut(): (number, ("interior" | "exterior"))
	-- Read BLOCK: 9 bytes
	local BLOCK_START = Read(9)
	local Value1 = buffer.readf64(RecieveBuffer, BLOCK_START + 0)
	local Value2 = true :: any
	local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 8)
	if Index == 0 then
		Value2 = "interior"
	elseif Index == 1 then
		Value2 = "exterior"
	else
		error(`Unexpected enum: {Index}`)
	end
	return Value1, Value2
end

local function Building_WriteEVENT_add_cutscene_to_house(Value: number): ()
	-- Allocate BLOCK: 9 bytes
	local BLOCK_START = Allocate(9)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
	buffer.writef64(SendBuffer, BLOCK_START + 1, Value)
end

local function Building_WriteEVENT_bulk_create_house_owners(Value1: { number }, Value2: { Instance }, Value3: { boolean }): ()
	-- Allocate BLOCK: 4 bytes
	local BLOCK_START = Allocate(4)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 2)
	-- START ARRAY
	buffer.writeu8(SendBuffer, BLOCK_START + 1, #Value1)
		-- Allocate BLOCK: 8 bytes
	local ARRAY_START_1 = Allocate(8 * #Value1)
	for Index = 1, #Value1 do
		local Item_1 = Value1[Index]
		-- Allocate 8
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 8
		buffer.writef64(SendBuffer, OPERATION_OFFSET, Item_1)
	end
	-- END ARRAY
	-- START ARRAY
	buffer.writeu8(SendBuffer, BLOCK_START + 2, #Value2)
	for Index = 1, #Value2 do
		local Item_1 = Value2[Index]
		table.insert(SendInstances, Item_1 or Null)
	end
	-- END ARRAY
	-- START ARRAY
	buffer.writeu8(SendBuffer, BLOCK_START + 3, #Value3)
		-- Allocate BLOCK: 1 bytes
	local ARRAY_START_1 = Allocate(1 * #Value3)
	for Index = 1, #Value3 do
		local Item_1 = Value3[Index]
		-- Allocate 1
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 1
		buffer.writeu8(SendBuffer, OPERATION_OFFSET, Item_1 and 1 or 0)
	end
	-- END ARRAY
end

local function Building_WriteEVENT_bulk_create_house(Value1: { number }, Value2: { CFrame }, Value3: { Instance }, Value4: { string }, Value5: { number }): ()
	-- Allocate BLOCK: 6 bytes
	local BLOCK_START = Allocate(6)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 3)
	-- START ARRAY
	buffer.writeu8(SendBuffer, BLOCK_START + 1, #Value1)
		-- Allocate BLOCK: 8 bytes
	local ARRAY_START_1 = Allocate(8 * #Value1)
	for Index = 1, #Value1 do
		local Item_1 = Value1[Index]
		-- Allocate 8
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 8
		buffer.writef64(SendBuffer, OPERATION_OFFSET, Item_1)
	end
	-- END ARRAY
	-- START ARRAY
	buffer.writeu8(SendBuffer, BLOCK_START + 2, #Value2)
		-- Allocate BLOCK: 24 bytes
	local ARRAY_START_1 = Allocate(24 * #Value2)
	for Index = 1, #Value2 do
		local Item_1 = Value2[Index]
		local Vector = Item_1.Position
		-- Allocate 4
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 4
		buffer.writef32(SendBuffer, OPERATION_OFFSET, Vector.X)
		-- Allocate 4
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 4
		buffer.writef32(SendBuffer, OPERATION_OFFSET, Vector.Y)
		-- Allocate 4
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 4
		buffer.writef32(SendBuffer, OPERATION_OFFSET, Vector.Z)
		local rX, rY, rZ = Item_1:ToOrientation()
		-- Allocate 4
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 4
		buffer.writef32(SendBuffer, OPERATION_OFFSET, rX)
		-- Allocate 4
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 4
		buffer.writef32(SendBuffer, OPERATION_OFFSET, rY)
		-- Allocate 4
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 4
		buffer.writef32(SendBuffer, OPERATION_OFFSET, rZ)
	end
	-- END ARRAY
	-- START ARRAY
	buffer.writeu8(SendBuffer, BLOCK_START + 3, #Value3)
	for Index = 1, #Value3 do
		local Item_1 = Value3[Index]
		table.insert(SendInstances, Item_1 or Null)
	end
	-- END ARRAY
	-- START ARRAY
	buffer.writeu8(SendBuffer, BLOCK_START + 4, #Value4)
		-- Allocate BLOCK: 2 bytes
	local ARRAY_START_1 = Allocate(2 * #Value4)
	for Index = 1, #Value4 do
		local Item_1 = Value4[Index]
		local Length = #Item_1
		-- Allocate 2
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 2
		buffer.writeu16(SendBuffer, OPERATION_OFFSET, Length)
		Allocate(Length)
		buffer.writestring(SendBuffer, SendOffset, Item_1, Length)
	end
	-- END ARRAY
	-- START ARRAY
	buffer.writeu8(SendBuffer, BLOCK_START + 5, #Value5)
		-- Allocate BLOCK: 8 bytes
	local ARRAY_START_1 = Allocate(8 * #Value5)
	for Index = 1, #Value5 do
		local Item_1 = Value5[Index]
		-- Allocate 8
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 8
		buffer.writef64(SendBuffer, OPERATION_OFFSET, Item_1)
	end
	-- END ARRAY
end

local function Building_WriteEVENT_create_house_owner(Value1: number, Value2: Instance, Value3: boolean): ()
	-- Allocate BLOCK: 10 bytes
	local BLOCK_START = Allocate(10)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 4)
	buffer.writef64(SendBuffer, BLOCK_START + 1, Value1)
	table.insert(SendInstances, Value2 or Null)
	buffer.writeu8(SendBuffer, BLOCK_START + 9, Value3 and 1 or 0)
end

local function Building_WriteEVENT_create_house(Value1: number, Value2: CFrame, Value3: Instance, Value4: string, Value5: number): ()
	-- Allocate BLOCK: 43 bytes
	local BLOCK_START = Allocate(43)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 5)
	buffer.writef64(SendBuffer, BLOCK_START + 1, Value1)
	local Vector = Value2.Position
	buffer.writef32(SendBuffer, BLOCK_START + 9, Vector.X)
	buffer.writef32(SendBuffer, BLOCK_START + 13, Vector.Y)
	buffer.writef32(SendBuffer, BLOCK_START + 17, Vector.Z)
	local rX, rY, rZ = Value2:ToOrientation()
	buffer.writef32(SendBuffer, BLOCK_START + 21, rX)
	buffer.writef32(SendBuffer, BLOCK_START + 25, rY)
	buffer.writef32(SendBuffer, BLOCK_START + 29, rZ)
	table.insert(SendInstances, Value3 or Null)
	local Length = #Value4
	buffer.writeu16(SendBuffer, BLOCK_START + 33, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value4, Length)
	buffer.writef64(SendBuffer, BLOCK_START + 35, Value5)
end

local function Building_WriteEVENT_delete_house_owner(Value: number): ()
	-- Allocate BLOCK: 9 bytes
	local BLOCK_START = Allocate(9)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 6)
	buffer.writef64(SendBuffer, BLOCK_START + 1, Value)
end

local function Building_WriteEVENT_bulk_create_restaurants(Value1: { number }, Value2: { string }, Value3: { Instance }): ()
	-- Allocate BLOCK: 4 bytes
	local BLOCK_START = Allocate(4)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 7)
	-- START ARRAY
	buffer.writeu8(SendBuffer, BLOCK_START + 1, #Value1)
		-- Allocate BLOCK: 8 bytes
	local ARRAY_START_1 = Allocate(8 * #Value1)
	for Index = 1, #Value1 do
		local Item_1 = Value1[Index]
		-- Allocate 8
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 8
		buffer.writef64(SendBuffer, OPERATION_OFFSET, Item_1)
	end
	-- END ARRAY
	-- START ARRAY
	buffer.writeu8(SendBuffer, BLOCK_START + 2, #Value2)
		-- Allocate BLOCK: 2 bytes
	local ARRAY_START_1 = Allocate(2 * #Value2)
	for Index = 1, #Value2 do
		local Item_1 = Value2[Index]
		local Length = #Item_1
		-- Allocate 2
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 2
		buffer.writeu16(SendBuffer, OPERATION_OFFSET, Length)
		Allocate(Length)
		buffer.writestring(SendBuffer, SendOffset, Item_1, Length)
	end
	-- END ARRAY
	-- START ARRAY
	buffer.writeu8(SendBuffer, BLOCK_START + 3, #Value3)
	for Index = 1, #Value3 do
		local Item_1 = Value3[Index]
		table.insert(SendInstances, Item_1 or Null)
	end
	-- END ARRAY
end

local function PlayerEvents_WriteEVENT_player_loaded_in(Value: number): ()
	-- Allocate BLOCK: 9 bytes
	local BLOCK_START = Allocate(9)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 8)
	buffer.writef64(SendBuffer, BLOCK_START + 1, Value)
end

local function PlayerEvents_ReadEVENT_i_have_loaded_in(): (nil)
	return nil
end

local function PlayerEvents_WriteEVENT_setup_map_on_join(Value: nil): ()
	-- Allocate BLOCK: 1 bytes
	local BLOCK_START = Allocate(1)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 10)
end

local function PlayerEvents_ReadEVENT_i_have_setup_map(): (nil)
	return nil
end

local function PlayerEvents_ReadEVENT_i_have_setup_houses(): (nil)
	return nil
end

local function PlayerEvents_ReadEVENT_i_have_setup_restaurants(): (nil)
	return nil
end

local function PlayerEvents_ReadEVENT_i_have_bulk_created_orders_initially(): (nil)
	return nil
end

local function RouberOrders_WriteEVENT_create_order(Value1: number, Value2: { ["restaurant_id"]: number, ["destination_id"]: number, ["foods_list_id"]: { number }, ["conditions_list_id"]: { number } }): ()
	-- Allocate BLOCK: 27 bytes
	local BLOCK_START = Allocate(27)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 15)
	buffer.writef64(SendBuffer, BLOCK_START + 1, Value1)
	buffer.writef64(SendBuffer, BLOCK_START + 9, Value2["restaurant_id"])
	buffer.writef64(SendBuffer, BLOCK_START + 17, Value2["destination_id"])
	-- START ARRAY
	buffer.writeu8(SendBuffer, BLOCK_START + 25, #Value2["foods_list_id"])
		-- Allocate BLOCK: 8 bytes
	local ARRAY_START_1 = Allocate(8 * #Value2["foods_list_id"])
	for Index = 1, #Value2["foods_list_id"] do
		local Item_1 = Value2["foods_list_id"][Index]
		-- Allocate 8
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 8
		buffer.writef64(SendBuffer, OPERATION_OFFSET, Item_1)
	end
	-- END ARRAY
	-- START ARRAY
	buffer.writeu8(SendBuffer, BLOCK_START + 26, #Value2["conditions_list_id"])
		-- Allocate BLOCK: 8 bytes
	local ARRAY_START_1 = Allocate(8 * #Value2["conditions_list_id"])
	for Index = 1, #Value2["conditions_list_id"] do
		local Item_1 = Value2["conditions_list_id"][Index]
		-- Allocate 8
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 8
		buffer.writef64(SendBuffer, OPERATION_OFFSET, Item_1)
	end
	-- END ARRAY
end

local function RouberOrders_WriteEVENT_bulk_create_order(Value1: { number }, Value2: { { ["restaurant_id"]: number, ["destination_id"]: number, ["foods_list_id"]: { number }, ["conditions_list_id"]: { number } } }): ()
	-- Allocate BLOCK: 3 bytes
	local BLOCK_START = Allocate(3)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 16)
	-- START ARRAY
	buffer.writeu8(SendBuffer, BLOCK_START + 1, #Value1)
		-- Allocate BLOCK: 8 bytes
	local ARRAY_START_1 = Allocate(8 * #Value1)
	for Index = 1, #Value1 do
		local Item_1 = Value1[Index]
		-- Allocate 8
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 8
		buffer.writef64(SendBuffer, OPERATION_OFFSET, Item_1)
	end
	-- END ARRAY
	-- START ARRAY
	buffer.writeu8(SendBuffer, BLOCK_START + 2, #Value2)
		-- Allocate BLOCK: 18 bytes
	local ARRAY_START_1 = Allocate(18 * #Value2)
	for Index = 1, #Value2 do
		local Item_1 = Value2[Index]
		-- Allocate 8
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 8
		buffer.writef64(SendBuffer, OPERATION_OFFSET, Item_1["restaurant_id"])
		-- Allocate 8
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 8
		buffer.writef64(SendBuffer, OPERATION_OFFSET, Item_1["destination_id"])
		-- START ARRAY
		-- Allocate 1
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 1
		buffer.writeu8(SendBuffer, OPERATION_OFFSET, #Item_1["foods_list_id"])
			-- Allocate BLOCK: 8 bytes
		local ARRAY_START_2 = Allocate(8 * #Item_1["foods_list_id"])
		for Index = 1, #Item_1["foods_list_id"] do
			local Item_2 = Item_1["foods_list_id"][Index]
			-- Allocate 8
			local OPERATION_OFFSET = ARRAY_START_2
			ARRAY_START_2 += 8
			buffer.writef64(SendBuffer, OPERATION_OFFSET, Item_2)
		end
		-- END ARRAY
		-- START ARRAY
		-- Allocate 1
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 1
		buffer.writeu8(SendBuffer, OPERATION_OFFSET, #Item_1["conditions_list_id"])
			-- Allocate BLOCK: 8 bytes
		local ARRAY_START_2 = Allocate(8 * #Item_1["conditions_list_id"])
		for Index = 1, #Item_1["conditions_list_id"] do
			local Item_2 = Item_1["conditions_list_id"][Index]
			-- Allocate 8
			local OPERATION_OFFSET = ARRAY_START_2
			ARRAY_START_2 += 8
			buffer.writef64(SendBuffer, OPERATION_OFFSET, Item_2)
		end
		-- END ARRAY
	end
	-- END ARRAY
end

local function RouberOrders_ReadEVENT_i_want_to_accept_order(): (number)
	-- Read BLOCK: 8 bytes
	local BLOCK_START = Read(8)
	local Value = buffer.readf64(RecieveBuffer, BLOCK_START + 0)
	return Value
end

local function RouberOrders_WriteEVENT_bulk_setup_food(Value1: { number }, Value2: { string }): ()
	-- Allocate BLOCK: 3 bytes
	local BLOCK_START = Allocate(3)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 18)
	-- START ARRAY
	buffer.writeu8(SendBuffer, BLOCK_START + 1, #Value1)
		-- Allocate BLOCK: 8 bytes
	local ARRAY_START_1 = Allocate(8 * #Value1)
	for Index = 1, #Value1 do
		local Item_1 = Value1[Index]
		-- Allocate 8
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 8
		buffer.writef64(SendBuffer, OPERATION_OFFSET, Item_1)
	end
	-- END ARRAY
	-- START ARRAY
	buffer.writeu8(SendBuffer, BLOCK_START + 2, #Value2)
		-- Allocate BLOCK: 2 bytes
	local ARRAY_START_1 = Allocate(2 * #Value2)
	for Index = 1, #Value2 do
		local Item_1 = Value2[Index]
		local Length = #Item_1
		-- Allocate 2
		local OPERATION_OFFSET = ARRAY_START_1
		ARRAY_START_1 += 2
		buffer.writeu16(SendBuffer, OPERATION_OFFSET, Length)
		Allocate(Length)
		buffer.writestring(SendBuffer, SendOffset, Item_1, Length)
	end
	-- END ARRAY
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	Building = {
		IWantToTeleportInOrOut = {
			iter = NOOP,
			next = NOOP
		},
		add_cutscene_to_house = {
			fire = NOOP,
			fire_all = NOOP,
			fire_list = NOOP,
			fire_except = NOOP
		},
		bulk_create_house_owners = {
			fire = NOOP,
			fire_all = NOOP,
			fire_list = NOOP,
			fire_except = NOOP
		},
		bulk_create_house = {
			fire = NOOP,
			fire_all = NOOP,
			fire_list = NOOP,
			fire_except = NOOP
		},
		create_house_owner = {
			fire = NOOP,
			fire_all = NOOP,
			fire_list = NOOP,
			fire_except = NOOP
		},
		create_house = {
			fire = NOOP,
			fire_all = NOOP,
			fire_list = NOOP,
			fire_except = NOOP
		},
		delete_house_owner = {
			fire = NOOP,
			fire_all = NOOP,
			fire_list = NOOP,
			fire_except = NOOP
		},
		bulk_create_restaurants = {
			fire = NOOP,
			fire_all = NOOP,
			fire_list = NOOP,
			fire_except = NOOP
		},
	},
	PlayerEvents = {
		player_loaded_in = {
			fire = NOOP,
			fire_all = NOOP,
			fire_list = NOOP,
			fire_except = NOOP
		},
		i_have_loaded_in = {
			iter = NOOP,
			next = NOOP
		},
		setup_map_on_join = {
			fire = NOOP,
			fire_all = NOOP,
			fire_list = NOOP,
			fire_except = NOOP
		},
		i_have_setup_map = {
			iter = NOOP,
			next = NOOP
		},
		i_have_setup_houses = {
			iter = NOOP,
			next = NOOP
		},
		i_have_setup_restaurants = {
			iter = NOOP,
			next = NOOP
		},
		i_have_bulk_created_orders_initially = {
			iter = NOOP,
			next = NOOP
		},
	},
	RouberOrders = {
		create_order = {
			fire = NOOP,
			fire_all = NOOP,
			fire_list = NOOP,
			fire_except = NOOP
		},
		bulk_create_order = {
			fire = NOOP,
			fire_all = NOOP,
			fire_list = NOOP,
			fire_except = NOOP
		},
		i_want_to_accept_order = {
			iter = NOOP,
			next = NOOP
		},
		bulk_setup_food = {
			fire = NOOP,
			fire_all = NOOP,
			fire_list = NOOP,
			fire_except = NOOP
		},
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsServer() then
    error("Server network module can only be required from the server.")
end

local Reliable: RemoteEvent = ReplicatedStorage:FindFirstChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
if not Reliable then
    local RemoteEvent = Instance.new("RemoteEvent")
    RemoteEvent.Name = BASE_EVENT_NAME .. "_RELIABLE_REMOTE"
    RemoteEvent.Parent = ReplicatedStorage
    Reliable = RemoteEvent
end

local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:FindFirstChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent
if not Unreliable then
    local UnreliableRemoteEvent = Instance.new("UnreliableRemoteEvent")
    UnreliableRemoteEvent.Name = BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE"
    UnreliableRemoteEvent.Parent = ReplicatedStorage
    Unreliable = UnreliableRemoteEvent
end

local PlayersMap: {[Player]: BufferSave} = {}

Players.PlayerRemoving:Connect(function(Player)
    PlayersMap[Player] = nil
end)

local function StepReplication()
    for Player, Send in PlayersMap do
        if Send.Cursor <= 0 then
            continue
        end

        local Buffer = buffer.create(Send.Cursor)
        buffer.copy(Buffer, 0, Send.Buffer, 0, Send.Cursor)
        Reliable:FireClient(Player, Buffer, Send.Instances)

        Send.Size = 64
        Send.Cursor = 0
        Send.Buffer = buffer.create(64)
        table.clear(Send.Instances)
    end
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			Push(Queue.Reliable[0], table.pack(Player, Building_ReadEVENT_IWantToTeleportInOrOut()))
		elseif Index == 9 then
			Push(Queue.Reliable[9], table.pack(Player, PlayerEvents_ReadEVENT_i_have_loaded_in()))
		elseif Index == 11 then
			Push(Queue.Reliable[11], table.pack(Player, PlayerEvents_ReadEVENT_i_have_setup_map()))
		elseif Index == 12 then
			Push(Queue.Reliable[12], table.pack(Player, PlayerEvents_ReadEVENT_i_have_setup_houses()))
		elseif Index == 13 then
			Push(Queue.Reliable[13], table.pack(Player, PlayerEvents_ReadEVENT_i_have_setup_restaurants()))
		elseif Index == 14 then
			Push(Queue.Reliable[14], table.pack(Player, PlayerEvents_ReadEVENT_i_have_bulk_created_orders_initially()))
		elseif Index == 17 then
			Push(Queue.Reliable[17], table.pack(Player, RouberOrders_ReadEVENT_i_want_to_accept_order()))
		end
	end
end)
Unreliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)


local Returns = table.freeze({
	step_replication = StepReplication,

	Building = {
		IWantToTeleportInOrOut = {
			iter = function(): () -> (number, Player, number, ("interior" | "exterior"))
				local index = 0
				local queue = Queue.Reliable[0]
				return function (): (number, Player, number, ("interior" | "exterior"))
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end,
			--- @deprecated v0.14.1 -- Use `Iter` instead.
			next = function(): () -> (number, Player, number, ("interior" | "exterior"))
				local index = 0
				local queue = Queue.Reliable[0]
				return function (): (number, Player, number, ("interior" | "exterior"))
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end
		},
		add_cutscene_to_house = {
			fire = function(Player: Player, Value: number): ()
				Load(PlayersMap[Player])
				Building_WriteEVENT_add_cutscene_to_house(Value)
				PlayersMap[Player] = Save()
			end,
			fire_all = function(Value: number): ()
				Load()
				Building_WriteEVENT_add_cutscene_to_house(Value)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_list = function(List: {Player}, Value: number): ()
				Load()
				Building_WriteEVENT_add_cutscene_to_house(Value)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in List do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_except = function(Except: Player, Value: number): ()
				Load()
				Building_WriteEVENT_add_cutscene_to_house(Value)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					if Player == Except then
						continue
					end
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
		},
		bulk_create_house_owners = {
			fire = function(Player: Player, Value1: { number }, Value2: { Instance }, Value3: { boolean }): ()
				Load(PlayersMap[Player])
				Building_WriteEVENT_bulk_create_house_owners(Value1, Value2, Value3)
				PlayersMap[Player] = Save()
			end,
			fire_all = function(Value1: { number }, Value2: { Instance }, Value3: { boolean }): ()
				Load()
				Building_WriteEVENT_bulk_create_house_owners(Value1, Value2, Value3)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_list = function(List: {Player}, Value1: { number }, Value2: { Instance }, Value3: { boolean }): ()
				Load()
				Building_WriteEVENT_bulk_create_house_owners(Value1, Value2, Value3)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in List do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_except = function(Except: Player, Value1: { number }, Value2: { Instance }, Value3: { boolean }): ()
				Load()
				Building_WriteEVENT_bulk_create_house_owners(Value1, Value2, Value3)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					if Player == Except then
						continue
					end
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
		},
		bulk_create_house = {
			fire = function(Player: Player, Value1: { number }, Value2: { CFrame }, Value3: { Instance }, Value4: { string }, Value5: { number }): ()
				Load(PlayersMap[Player])
				Building_WriteEVENT_bulk_create_house(Value1, Value2, Value3, Value4, Value5)
				PlayersMap[Player] = Save()
			end,
			fire_all = function(Value1: { number }, Value2: { CFrame }, Value3: { Instance }, Value4: { string }, Value5: { number }): ()
				Load()
				Building_WriteEVENT_bulk_create_house(Value1, Value2, Value3, Value4, Value5)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_list = function(List: {Player}, Value1: { number }, Value2: { CFrame }, Value3: { Instance }, Value4: { string }, Value5: { number }): ()
				Load()
				Building_WriteEVENT_bulk_create_house(Value1, Value2, Value3, Value4, Value5)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in List do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_except = function(Except: Player, Value1: { number }, Value2: { CFrame }, Value3: { Instance }, Value4: { string }, Value5: { number }): ()
				Load()
				Building_WriteEVENT_bulk_create_house(Value1, Value2, Value3, Value4, Value5)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					if Player == Except then
						continue
					end
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
		},
		create_house_owner = {
			fire = function(Player: Player, Value1: number, Value2: Instance, Value3: boolean): ()
				Load(PlayersMap[Player])
				Building_WriteEVENT_create_house_owner(Value1, Value2, Value3)
				PlayersMap[Player] = Save()
			end,
			fire_all = function(Value1: number, Value2: Instance, Value3: boolean): ()
				Load()
				Building_WriteEVENT_create_house_owner(Value1, Value2, Value3)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_list = function(List: {Player}, Value1: number, Value2: Instance, Value3: boolean): ()
				Load()
				Building_WriteEVENT_create_house_owner(Value1, Value2, Value3)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in List do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_except = function(Except: Player, Value1: number, Value2: Instance, Value3: boolean): ()
				Load()
				Building_WriteEVENT_create_house_owner(Value1, Value2, Value3)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					if Player == Except then
						continue
					end
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
		},
		create_house = {
			fire = function(Player: Player, Value1: number, Value2: CFrame, Value3: Instance, Value4: string, Value5: number): ()
				Load(PlayersMap[Player])
				Building_WriteEVENT_create_house(Value1, Value2, Value3, Value4, Value5)
				PlayersMap[Player] = Save()
			end,
			fire_all = function(Value1: number, Value2: CFrame, Value3: Instance, Value4: string, Value5: number): ()
				Load()
				Building_WriteEVENT_create_house(Value1, Value2, Value3, Value4, Value5)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_list = function(List: {Player}, Value1: number, Value2: CFrame, Value3: Instance, Value4: string, Value5: number): ()
				Load()
				Building_WriteEVENT_create_house(Value1, Value2, Value3, Value4, Value5)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in List do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_except = function(Except: Player, Value1: number, Value2: CFrame, Value3: Instance, Value4: string, Value5: number): ()
				Load()
				Building_WriteEVENT_create_house(Value1, Value2, Value3, Value4, Value5)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					if Player == Except then
						continue
					end
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
		},
		delete_house_owner = {
			fire = function(Player: Player, Value: number): ()
				Load(PlayersMap[Player])
				Building_WriteEVENT_delete_house_owner(Value)
				PlayersMap[Player] = Save()
			end,
			fire_all = function(Value: number): ()
				Load()
				Building_WriteEVENT_delete_house_owner(Value)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_list = function(List: {Player}, Value: number): ()
				Load()
				Building_WriteEVENT_delete_house_owner(Value)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in List do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_except = function(Except: Player, Value: number): ()
				Load()
				Building_WriteEVENT_delete_house_owner(Value)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					if Player == Except then
						continue
					end
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
		},
		bulk_create_restaurants = {
			fire = function(Player: Player, Value1: { number }, Value2: { string }, Value3: { Instance }): ()
				Load(PlayersMap[Player])
				Building_WriteEVENT_bulk_create_restaurants(Value1, Value2, Value3)
				PlayersMap[Player] = Save()
			end,
			fire_all = function(Value1: { number }, Value2: { string }, Value3: { Instance }): ()
				Load()
				Building_WriteEVENT_bulk_create_restaurants(Value1, Value2, Value3)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_list = function(List: {Player}, Value1: { number }, Value2: { string }, Value3: { Instance }): ()
				Load()
				Building_WriteEVENT_bulk_create_restaurants(Value1, Value2, Value3)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in List do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_except = function(Except: Player, Value1: { number }, Value2: { string }, Value3: { Instance }): ()
				Load()
				Building_WriteEVENT_bulk_create_restaurants(Value1, Value2, Value3)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					if Player == Except then
						continue
					end
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
		},
	},
	PlayerEvents = {
		player_loaded_in = {
			fire = function(Player: Player, Value: number): ()
				Load(PlayersMap[Player])
				PlayerEvents_WriteEVENT_player_loaded_in(Value)
				PlayersMap[Player] = Save()
			end,
			fire_all = function(Value: number): ()
				Load()
				PlayerEvents_WriteEVENT_player_loaded_in(Value)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_list = function(List: {Player}, Value: number): ()
				Load()
				PlayerEvents_WriteEVENT_player_loaded_in(Value)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in List do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_except = function(Except: Player, Value: number): ()
				Load()
				PlayerEvents_WriteEVENT_player_loaded_in(Value)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					if Player == Except then
						continue
					end
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
		},
		i_have_loaded_in = {
			iter = function(): () -> (number, Player, nil)
				local index = 0
				local queue = Queue.Reliable[9]
				return function (): (number, Player, nil)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end,
			--- @deprecated v0.14.1 -- Use `Iter` instead.
			next = function(): () -> (number, Player, nil)
				local index = 0
				local queue = Queue.Reliable[9]
				return function (): (number, Player, nil)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end
		},
		setup_map_on_join = {
			fire = function(Player: Player, Value: nil): ()
				Load(PlayersMap[Player])
				PlayerEvents_WriteEVENT_setup_map_on_join(Value)
				PlayersMap[Player] = Save()
			end,
			fire_all = function(Value: nil): ()
				Load()
				PlayerEvents_WriteEVENT_setup_map_on_join(Value)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_list = function(List: {Player}, Value: nil): ()
				Load()
				PlayerEvents_WriteEVENT_setup_map_on_join(Value)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in List do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_except = function(Except: Player, Value: nil): ()
				Load()
				PlayerEvents_WriteEVENT_setup_map_on_join(Value)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					if Player == Except then
						continue
					end
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
		},
		i_have_setup_map = {
			iter = function(): () -> (number, Player, nil)
				local index = 0
				local queue = Queue.Reliable[11]
				return function (): (number, Player, nil)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end,
			--- @deprecated v0.14.1 -- Use `Iter` instead.
			next = function(): () -> (number, Player, nil)
				local index = 0
				local queue = Queue.Reliable[11]
				return function (): (number, Player, nil)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end
		},
		i_have_setup_houses = {
			iter = function(): () -> (number, Player, nil)
				local index = 0
				local queue = Queue.Reliable[12]
				return function (): (number, Player, nil)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end,
			--- @deprecated v0.14.1 -- Use `Iter` instead.
			next = function(): () -> (number, Player, nil)
				local index = 0
				local queue = Queue.Reliable[12]
				return function (): (number, Player, nil)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end
		},
		i_have_setup_restaurants = {
			iter = function(): () -> (number, Player, nil)
				local index = 0
				local queue = Queue.Reliable[13]
				return function (): (number, Player, nil)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end,
			--- @deprecated v0.14.1 -- Use `Iter` instead.
			next = function(): () -> (number, Player, nil)
				local index = 0
				local queue = Queue.Reliable[13]
				return function (): (number, Player, nil)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end
		},
		i_have_bulk_created_orders_initially = {
			iter = function(): () -> (number, Player, nil)
				local index = 0
				local queue = Queue.Reliable[14]
				return function (): (number, Player, nil)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end,
			--- @deprecated v0.14.1 -- Use `Iter` instead.
			next = function(): () -> (number, Player, nil)
				local index = 0
				local queue = Queue.Reliable[14]
				return function (): (number, Player, nil)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end
		},
	},
	RouberOrders = {
		create_order = {
			fire = function(Player: Player, Value1: number, Value2: { ["restaurant_id"]: number, ["destination_id"]: number, ["foods_list_id"]: { number }, ["conditions_list_id"]: { number } }): ()
				Load(PlayersMap[Player])
				RouberOrders_WriteEVENT_create_order(Value1, Value2)
				PlayersMap[Player] = Save()
			end,
			fire_all = function(Value1: number, Value2: { ["restaurant_id"]: number, ["destination_id"]: number, ["foods_list_id"]: { number }, ["conditions_list_id"]: { number } }): ()
				Load()
				RouberOrders_WriteEVENT_create_order(Value1, Value2)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_list = function(List: {Player}, Value1: number, Value2: { ["restaurant_id"]: number, ["destination_id"]: number, ["foods_list_id"]: { number }, ["conditions_list_id"]: { number } }): ()
				Load()
				RouberOrders_WriteEVENT_create_order(Value1, Value2)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in List do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_except = function(Except: Player, Value1: number, Value2: { ["restaurant_id"]: number, ["destination_id"]: number, ["foods_list_id"]: { number }, ["conditions_list_id"]: { number } }): ()
				Load()
				RouberOrders_WriteEVENT_create_order(Value1, Value2)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					if Player == Except then
						continue
					end
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
		},
		bulk_create_order = {
			fire = function(Player: Player, Value1: { number }, Value2: { { ["restaurant_id"]: number, ["destination_id"]: number, ["foods_list_id"]: { number }, ["conditions_list_id"]: { number } } }): ()
				Load(PlayersMap[Player])
				RouberOrders_WriteEVENT_bulk_create_order(Value1, Value2)
				PlayersMap[Player] = Save()
			end,
			fire_all = function(Value1: { number }, Value2: { { ["restaurant_id"]: number, ["destination_id"]: number, ["foods_list_id"]: { number }, ["conditions_list_id"]: { number } } }): ()
				Load()
				RouberOrders_WriteEVENT_bulk_create_order(Value1, Value2)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_list = function(List: {Player}, Value1: { number }, Value2: { { ["restaurant_id"]: number, ["destination_id"]: number, ["foods_list_id"]: { number }, ["conditions_list_id"]: { number } } }): ()
				Load()
				RouberOrders_WriteEVENT_bulk_create_order(Value1, Value2)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in List do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_except = function(Except: Player, Value1: { number }, Value2: { { ["restaurant_id"]: number, ["destination_id"]: number, ["foods_list_id"]: { number }, ["conditions_list_id"]: { number } } }): ()
				Load()
				RouberOrders_WriteEVENT_bulk_create_order(Value1, Value2)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					if Player == Except then
						continue
					end
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
		},
		i_want_to_accept_order = {
			iter = function(): () -> (number, Player, number)
				local index = 0
				local queue = Queue.Reliable[17]
				return function (): (number, Player, number)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end,
			--- @deprecated v0.14.1 -- Use `Iter` instead.
			next = function(): () -> (number, Player, number)
				local index = 0
				local queue = Queue.Reliable[17]
				return function (): (number, Player, number)
					index += 1
					local arguments = Pop(queue)
					if arguments ~= nil then
						return index, unpack(arguments, 1, arguments.n)
					end
					return 
				end
			end
		},
		bulk_setup_food = {
			fire = function(Player: Player, Value1: { number }, Value2: { string }): ()
				Load(PlayersMap[Player])
				RouberOrders_WriteEVENT_bulk_setup_food(Value1, Value2)
				PlayersMap[Player] = Save()
			end,
			fire_all = function(Value1: { number }, Value2: { string }): ()
				Load()
				RouberOrders_WriteEVENT_bulk_setup_food(Value1, Value2)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_list = function(List: {Player}, Value1: { number }, Value2: { string }): ()
				Load()
				RouberOrders_WriteEVENT_bulk_setup_food(Value1, Value2)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in List do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			fire_except = function(Except: Player, Value1: { number }, Value2: { string }): ()
				Load()
				RouberOrders_WriteEVENT_bulk_setup_food(Value1, Value2)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					if Player == Except then
						continue
					end
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
		},
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL